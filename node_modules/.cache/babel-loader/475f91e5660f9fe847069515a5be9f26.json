{"ast":null,"code":"var _jsxFileName = \"/home/faisal/Desktop/mern-front/src/components/common/Smart/ChangePassword.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Layout from '../../Layouts/Layout';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { changepassword } from '../../../services/API';\nimport { isAuth, getCookie } from '../../../helpers/helpers';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChangePassword = ({\n  match\n}) => {\n  _s();\n\n  // props.match from react router dom\n  const [name, setname] = useState(isAuth().name);\n  const [oldpassword, setoldPassword] = useState('');\n  const [newpassword, setnewPassword] = useState('');\n  const [cnfpassword, setcnfPassword] = useState('');\n  const [buttonText, setButtonText] = useState('Reset Password');\n  const [token, setToken] = useState(getCookie('token'));\n  const [user_id, setUserId] = useState('');\n  useEffect(() => {\n    const _id = isAuth()._id;\n\n    setUserId(_id);\n  }, []);\n\n  const handleOld = e => {\n    setoldPassword(e.target.value);\n  };\n\n  const handleNew = e => {\n    setnewPassword(e.target.value);\n  };\n\n  const handleCnf = e => {\n    setcnfPassword(e.target.value);\n  };\n\n  const checkPassword = () => {\n    if (oldpassword === '') toast.error('old password field is empty');\n    if (newpassword === '') toast.error('new password field is empty');else if (cnfpassword === '') toast.error('confirm password field is empty');else if (newpassword !== cnfpassword) {\n      toast.error('new and confirm password did not match');\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  const clickSubmit = event => {\n    event.preventDefault();\n\n    if (checkPassword()) {\n      setButtonText(\"Submitting\");\n      changepassword(newpassword, token, user_id, oldpassword).then(response => {\n        console.log('RESET PASSWORD SUCCESS', response);\n        toast.success(response.data.message);\n        setButtonText(\"Done\");\n      }).catch(error => {\n        console.log('RESET PASSWORD ERROR', error.response.data);\n        toast.error(error.response.data.error);\n        setButtonText(\"Reset Password\");\n      });\n    }\n  };\n\n  const passwordResetForm = () => /*#__PURE__*/_jsxDEV(\"form\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: handleOld,\n        value: oldpassword,\n        type: \"password\",\n        className: \"form-control\",\n        placeholder: \"Old password\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: handleNew,\n        value: newpassword,\n        type: \"password\",\n        className: \"form-control\",\n        placeholder: \"Type new password\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: handleCnf,\n        value: cnfpassword,\n        type: \"password\",\n        className: \"form-control\",\n        placeholder: \"Type confirm new password\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: clickSubmit,\n        children: buttonText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-md-6 offset-md-3\",\n      children: [/*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"p-5 text-center\",\n        children: [\"Hey \", name, \", Type your new password\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), passwordResetForm()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ChangePassword, \"DB6K2B3fZC4A4qcXE4D2ibsg6aU=\");\n\n_c = ChangePassword;\nexport default ChangePassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChangePassword\");","map":{"version":3,"sources":["/home/faisal/Desktop/mern-front/src/components/common/Smart/ChangePassword.js"],"names":["React","useState","useEffect","Layout","ToastContainer","toast","changepassword","isAuth","getCookie","ChangePassword","match","name","setname","oldpassword","setoldPassword","newpassword","setnewPassword","cnfpassword","setcnfPassword","buttonText","setButtonText","token","setToken","user_id","setUserId","_id","handleOld","e","target","value","handleNew","handleCnf","checkPassword","error","clickSubmit","event","preventDefault","then","response","console","log","success","data","message","catch","passwordResetForm"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Layout from '../../Layouts/Layout';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { changepassword} from '../../../services/API'\nimport { isAuth,getCookie } from '../../../helpers/helpers';\nimport 'react-toastify/dist/ReactToastify.min.css';\n\nconst ChangePassword = ({ match }) => {\n    // props.match from react router dom\n    const [name, setname]= useState(isAuth().name);\n    const [ oldpassword, setoldPassword] = useState('');\n    const [ newpassword, setnewPassword] = useState('');\n    const [ cnfpassword, setcnfPassword] = useState('');\n    const [ buttonText, setButtonText] = useState('Reset Password');\n    const [ token, setToken] = useState(getCookie('token'));\n    const [ user_id, setUserId] = useState('');\n    \n\n    useEffect(() => {\n        const _id = isAuth()._id;\n        setUserId(_id);\n    }, []);\n\n    const handleOld = (e) => {\n        setoldPassword(e.target.value);\n       \n      };\n     \n    const handleNew = (e) => {\n        setnewPassword(e.target.value);\n       \n      };\n      const handleCnf = (e) => {\n        setcnfPassword(e.target.value);\n       \n      };\n      const checkPassword = () => {\n\n        if (oldpassword === '')\n        toast.error('old password field is empty');\n        if (newpassword === '')\n        toast.error('new password field is empty');\n              \n        else if (cnfpassword === '')\n        toast.error('confirm password field is empty');\n              \n        else if (newpassword !== cnfpassword) {\n            toast.error('new and confirm password did not match');\n            return false;\n        }\n\n        else{\n            return true;\n        }\n    }\n      \n    const clickSubmit = event => {\n        event.preventDefault();\n        \n        if(checkPassword()) {\n            setButtonText(\"Submitting\")\n            changepassword(newpassword,token,user_id,oldpassword).then(response => {\n                console.log('RESET PASSWORD SUCCESS', response);\n                toast.success(response.data.message);\n                setButtonText(\"Done\")\n            })\n            .catch(error => {\n                console.log('RESET PASSWORD ERROR', error.response.data);\n                toast.error(error.response.data.error);\n                setButtonText(\"Reset Password\")\n            });\n        }\n        \n    };\n\n    const passwordResetForm = () => (\n        <form>\n            <div className=\"form-group\">\n                {/* <label className=\"text-muted\">old password</label> */}\n                <input\n                    onChange={handleOld}\n                    value={oldpassword}\n                    type=\"password\"\n                    className=\"form-control\"\n                    placeholder=\"Old password\"\n                    required\n                />\n            </div>\n            <div className=\"form-group\">\n                {/* <label className=\"text-muted\">new password</label> */}\n                <input\n                    onChange={handleNew}\n                    value={newpassword}\n                    type=\"password\"\n                    className=\"form-control\"\n                    placeholder=\"Type new password\"\n                    required\n                />\n            </div>\n            <div className=\"form-group\">\n                {/* <label className=\"text-muted\">confirm new password</label> */}\n                <input\n                    onChange={handleCnf}\n                    value={cnfpassword}\n                    type=\"password\"\n                    className=\"form-control\"\n                    placeholder=\"Type confirm new password\"\n                    required\n                />\n            </div>\n\n\n\n\n            <div>\n                <button className=\"btn btn-primary\" onClick={clickSubmit}>\n                    {buttonText}\n                </button>\n            </div>\n        </form>\n    );\n\n    return (\n        <Layout>\n            <div className=\"col-md-6 offset-md-3\">\n                <ToastContainer />\n                <h1 className=\"p-5 text-center\">Hey {name}, Type your new password</h1>\n                {passwordResetForm()}\n            </div>\n        </Layout>\n    );\n};\n\nexport default ChangePassword;"]},"metadata":{},"sourceType":"module"}